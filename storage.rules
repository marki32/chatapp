rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB max
    }

    function isValidVideo() {
      return request.resource.contentType.matches('video/(mp4|webm|quicktime|x-m4v)') &&
             request.resource.size < 100 * 1024 * 1024; // 100MB max
    }

    // Profile pictures
    match /avatars/{userId}/{fileName} {
      allow read: if true;
      
      allow create: if isOwner(userId) &&
                   isValidImage() &&
                   fileName.size() < 100 &&
                   fileName.matches('^[^/]+$'); // No path traversal
      
      allow update: if isOwner(userId) && isValidImage();
      
      allow delete: if isOwner(userId);
    }

    // Photo uploads
    match /photos/{userId}/{fileName} {
      allow read: if true;
      
      allow create: if isOwner(userId) &&
                   isValidImage() &&
                   fileName.size() < 100 &&
                   fileName.matches('^[^/]+$'); // No path traversal
      
      allow update: if isOwner(userId) && isValidImage();
      
      allow delete: if isOwner(userId);
    }

    // Video uploads
    match /videos/{userId}/{fileName} {
      allow read: if true;
      
      allow create: if isOwner(userId) &&
                   isValidVideo() &&
                   fileName.size() < 100 &&
                   fileName.matches('^[^/]+$'); // No path traversal
      
      allow update: if isOwner(userId) && isValidVideo();
      
      allow delete: if isOwner(userId);
    }
  }
}